{"version":3,"sources":["<no source>","../../../../../../src/legacy/style/tool/_legacy.scss","../../../../../../src/component/badge/style/_scheme.scss","../../../../../../src/core/style/color/tool/_element.scss","../../../badge.legacy.css","../../../../../../src/core/style/color/tool/_accent.scss"],"names":[],"mappings":"AAAA;;GAAA;ACcI;ECRF;IC2BI,cAAU;IAAV,sBAAU;EC9Bd;;EFOE;ICuBE,cAAU;IAAV,yBAAU;EClBd;;EFAE;ICkBE,cAAU;IAAV,yBAAU;ECNd;;EFPE;ICaE,cAAU;IAAV,yBAAU;ECMd;;EFdE;ICQE,cAAU;IAAV,yBAAU;ECkBd;;EFrBE;ICGE,cAAU;IAAV,yBAAU;EC8Bd;;ECjDI;IFmBA,cAAU;IAAV,yBAAU;EC0Cd;;EC7DI;IFmBA,cAAU;IAAV,yBAAU;ECsDd;;ECzEI;IFmBA,cAAU;IAAV,yBAAU;ECkEd;;ECrFI;IFmBA,cAAU;IAAV,yBAAU;EC8Ed;;ECjGI;IFmBA,cAAU;IAAV,yBAAU;EC0Fd;;EC7GI;IFmBA,cAAU;IAAV,yBAAU;ECsGd;;ECzHI;IFmBA,cAAU;IAAV,yBAAU;ECkHd;;ECrII;IFmBA,cAAU;IAAV,yBAAU;EC8Hd;;ECjJI;IFmBA,cAAU;IAAV,yBAAU;EC0Id;;EC7JI;IFmBA,cAAU;IAAV,yBAAU;ECsJd;;ECzKI;IFmBA,cAAU;IAAV,yBAAU;ECkKd;;ECrLI;IFmBA,cAAU;IAAV,yBAAU;EC8Kd;;ECjMI;IFmBA,cAAU;IAAV,yBAAU;EC0Ld;;EC7MI;IFmBA,cAAU;IAAV,yBAAU;ECsMd;;ECzNI;IFmBA,cAAU;IAAV,yBAAU;ECkNd;;ECrOI;IFmBA,cAAU;IAAV,yBAAU;EC8Nd;;ECjPI;IFmBA,cAAU;IAAV,yBAAU;EC0Od;AAvQF","file":"badge.legacy.css","sourcesContent":[null,"////\n/// Legacy Tool : legacy\n/// @group legacy\n////\n\n/// Styles spécifiques pour les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n      @content;\n    }\n  }\n}\n\n/// Styles spécifiques pour les plateformes modernes, excluant les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin not-legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @supports not (-ms-high-contrast: none) {\n      @content;\n    }\n  }\n}\n","////\n/// Badge Module\n/// @group badge\n////\n\n@mixin _badge-scheme($legacy: false) {\n  #{ns(badge)} {\n    @include scheme-element-text-color(default grey, (legacy: $legacy));\n    @include scheme-element-bg-color(contrast grey, (legacy: $legacy));\n\n    &--info {\n      @include scheme-element-text-color(default info, (legacy: $legacy));\n      @include scheme-element-bg-color(contrast info, (legacy: $legacy));\n    }\n\n    &--error {\n      @include scheme-element-text-color(default error, (legacy: $legacy));\n      @include scheme-element-bg-color(contrast error, (legacy: $legacy));\n    }\n\n    &--success {\n      @include scheme-element-text-color(default success, (legacy: $legacy));\n      @include scheme-element-bg-color(contrast success, (legacy: $legacy));\n    }\n\n    &--warning {\n      @include scheme-element-text-color(default warning, (legacy: $legacy));\n      @include scheme-element-bg-color(contrast warning, (legacy: $legacy));\n    }\n\n    &--new {\n      @include scheme-element-text-color(action-high yellow-moutarde, (legacy: $legacy));\n      @include scheme-element-bg-color(contrast yellow-moutarde, (legacy: $legacy));\n    }\n\n    @include accent-modifiers {\n      @include scheme-element-text-color(label accent, (legacy: $legacy));\n      @include scheme-element-bg-color(contrast accent, (legacy: $legacy));\n    }\n  }\n}\n","////\n/// Core Color Tools : Element\n/// @group core\n////\n\n$ACCENT: none;\n\n@mixin _scheme-element($prop, $context, $tokens, $options: (), $value: $COLOR) {\n  $legacy: map-get($options, legacy);\n  $important: map-get($options, important);\n  $hover: map-get($options, hover);\n  $standalone: map-get($options, standalone);\n\n  $tokens: normalise-tokens($tokens, $context);\n  $type: decision;\n  $options: (var: true);\n  @if $legacy or $standalone {\n    $type: hex;\n    $option: (theme: light);\n  }\n  $colors: get-colors($tokens, $type, $options);\n  $result: get-result($colors, $value);\n  $result: important($result, $important);\n\n  @if $hover and $context == background and $legacy == false and length($tokens) == 1 {\n    $blend: get-color(nth($tokens, 1), decision, (var: true, blend: true));\n    $blend: important($blend, $important);\n\n    --blend: #{$blend};\n  }\n\n  @if $legacy {\n    @include legacy(ie11) {\n      #{$prop}: #{$result};\n    }\n  }\n  @else {\n    #{$prop}: #{$result};\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-bg-color($tokens, $options:()) {\n  @if not map-has-key($options, hover) {\n    $options: map-merge($options, (hover: true));\n  }\n  @include _scheme-element(background-color, background, $tokens, $options);\n}\n\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n///   - hover {boolean}: si true, surcharge la valeur de blend pour être héritée\n@mixin scheme-element-bg-transparent($options) {\n  $legacy: map-get($options, legacy);\n  $important: map-get($options, important);\n  $hover: map-get($options, hover);\n\n  $value: important(transparent, $important);\n\n  @if $important {\n    $value: #{$value} !important;\n  }\n\n  @if $legacy {\n    @include legacy(ie11) {\n      background-color: transparent;\n    }\n  }\n  @else {\n    background-color: transparent;\n    @if $hover {\n      --blend: inherit;\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-bg-image-color($tokens, $options, $value: linear-gradient(0deg, $COLOR, $COLOR)) {\n  $d: get-tokens-length($tokens);\n  @if $d > 1 and $value == linear-gradient(0deg, $COLOR, $COLOR) {\n    $transformed: ();\n    @for $i from 1 through $d {\n      $c: unquote('$color##{$i}');\n      $transformed: append($transformed, linear-gradient(0deg, $c, $c), comma);\n    }\n    $value: $transformed;\n  }\n  @include _scheme-element(background-image, background, $tokens, $options, $value);\n}\n\n/// Ajout d'une couleur de texte sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-text-color($tokens, $options) {\n  @include _scheme-element(color, text, $tokens, $options);\n}\n\n/// Ajout d'une couleur de fill sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-fill-color($tokens, $options) {\n  @include _scheme-element(fill, background , $tokens, $options);\n}\n\n/// Ajout d'une couleur de border sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n///   - side {String}: le côté affecté. valeurs: top, right, bottom, left\n/// @param {List} $value - définition des propriétés de border\n@mixin scheme-element-border-color($tokens, $options, $value:1px solid $COLOR) {\n  $prop:border;\n  @if map-has-key($options, side) {\n    $prop:border-#{map-get($options, side)};\n  }\n  @include _scheme-element($prop, border, $tokens, $options, $value);\n}\n\n@mixin scheme-element-no-border($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    border: 0;\n  }\n}\n\n/// Ajout d'une couleur d'outline sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés d'outline\n@mixin scheme-element-outline-color($tokens, $options, $value:1px solid $COLOR) {\n  @include _scheme-element(outline, border, $tokens, $options, $value);\n}\n\n/// Ajout d'une couleur de box-shadow sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés de box-shadow\n@mixin scheme-element-box-shadow-color($tokens, $options, $value: all-1-in) {\n  $has-keys: true;\n  $transformed: ();\n  $d: get-tokens-length($tokens);\n  $i: 1;\n  @each $v in $value {\n    @if map-has-key($box-shadows, $v) {\n      $transformed: append($transformed, _get-box-shadow($v, $i), comma);\n      @if $i < $d {\n        $i: $i + 1;\n      }\n    }\n    @else {\n      $has-keys: false;\n    }\n  }\n  @if $has-keys {\n    $value: $transformed;\n  }\n  @include _scheme-element(box-shadow, border, $tokens, $options, space($value));\n}\n\n/// Supprime la shadow-box sur l'élément\n/// @access public\n/// @param {string} $breakpoint - la shadow-box est retiré à partir d'un breakpoint si celui-ci est défini\n@mixin scheme-element-no-box-shadow($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    box-shadow: none;\n  }\n}\n","@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge {\n    color: #3a3a3a;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge {\n    background-color: #eee;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--info {\n    color: #0063cb;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--info {\n    background-color: #e8edff;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--error {\n    color: #ce0500;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--error {\n    background-color: #ffe9e9;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--success {\n    color: #18753c;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--success {\n    background-color: #b8fec9;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--warning {\n    color: #b34000;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--warning {\n    background-color: #ffe9e6;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--new {\n    color: #695240;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--new {\n    background-color: #feebd0;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--green-tilleul-verveine {\n    color: #66673d;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--green-tilleul-verveine {\n    background-color: #fceeac;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--green-bourgeon {\n    color: #447049;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--green-bourgeon {\n    background-color: #c9fcac;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--green-emeraude {\n    color: #297254;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--green-emeraude {\n    background-color: #c3fad5;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--green-menthe {\n    color: #37635f;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--green-menthe {\n    background-color: #bafaee;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--green-archipel {\n    color: #006a6f;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--green-archipel {\n    background-color: #c7f6fc;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--blue-ecume {\n    color: #2f4077;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--blue-ecume {\n    background-color: #e9edfe;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--blue-cumulus {\n    color: #3558a2;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--blue-cumulus {\n    background-color: #e6eefe;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--purple-glycine {\n    color: #6e445a;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--purple-glycine {\n    background-color: #fee7fc;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--pink-macaron {\n    color: #8d533e;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--pink-macaron {\n    background-color: #fee9e6;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--pink-tuile {\n    color: #a94645;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--pink-tuile {\n    background-color: #fee9e7;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--yellow-tournesol {\n    color: #716043;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--yellow-tournesol {\n    background-color: #feecc2;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--yellow-moutarde {\n    color: #695240;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--yellow-moutarde {\n    background-color: #feebd0;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--orange-terre-battue {\n    color: #755348;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--orange-terre-battue {\n    background-color: #fee9e5;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--brown-cafe-creme {\n    color: #685c48;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--brown-cafe-creme {\n    background-color: #f7ecdb;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--brown-caramel {\n    color: #845d48;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--brown-caramel {\n    background-color: #f7ebe5;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--brown-opera {\n    color: #745b47;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--brown-opera {\n    background-color: #f7ece4;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--beige-gris-galet {\n    color: #6a6156;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--beige-gris-galet {\n    background-color: #f3ede5;\n  }\n}\n","////\n/// Core Tools : Color accent\n/// @group schemes\n////\n\n@mixin accent-modifiers () {\n  $tints: ();\n  $accent: map-get($scheme-sets, accent);\n  @each $tint, $value in $accent {\n    $tints: append($tints, $tint);\n  }\n\n  @at-root {\n    @each $tint in $tints {\n      &--#{$tint} {\n        $ACCENT: #{$tint} !global;\n        @content;\n      }\n    }\n    $ACCENT: none !global;\n  }\n}\n"]}