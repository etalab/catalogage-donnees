{"version":3,"sources":["<no source>","../../../badge.css","../../../../../../src/component/badge/main.scss","../../../../../../src/component/link/style/tool/_build.scss","../../../../../../src/core/style/reset/tool/_link.scss","../../../../../../src/core/style/typography/tool/_styles.scss","../../../../../../src/core/style/display/tool/_display.scss","../../../../../../src/core/style/spacing/tool/_z-index.scss","../../../../../../src/core/style/spacing/setting/_z-index.scss","../../../../../../src/core/style/action/tool/_hover.scss","../../../../../../src/component/link/style/tool/_size.scss","../../../../../../src/core/style/function/_unit.scss","../../../../../../src/core/style/spacing/function/_space.scss","../../../../../../src/component/link/style/tool/_icon.scss","../../../../../../src/core/style/typography/tool/_font-weight.scss","../../../../../../src/core/style/typography/setting/_font-weight.scss","../../../../../../src/core/style/spacing/tool/_size.scss","../../../../../../src/component/badge/style/_module.scss","../../../../../../src/core/style/color/tool/_element.scss","../../../../../../src/core/style/selector/tool/_pattern.scss","../../../../../../src/core/style/selector/tool/_pseudo.scss","../../../../../../src/core/style/icon/_tool.scss","../../../../../../src/core/style/reset/tool/_list.scss","../../../../../../src/core/style/spacing/tool/_space.scss","../../../../../../src/component/badge/style/_scheme.scss","../../../../../../src/core/style/color/tool/_accent.scss","../../../../../../src/legacy/style/tool/_legacy.scss"],"names":[],"mappings":"AAAA;;GAAA;ACAA,gBAAgB;;ACKhB;;yCDFyC;AEqEvC;ECvDA,sBAAiB;EACjB,uBAAkB;EAClB,0BAAqB;ECgFnB,iBAA6B;EAA7B,kBAA6B;EC3F7B,oBAAoB;EAWpB,mBAAa;ECHf,UCJO;;ECsDP,uBAAkB;ECzDlB,mBCkBgD;EDjBhD,mBEoFsB;EFjFtB,kBEiFsB;EFlEtB,iBAAoC;EGXlC,mBAAmB;EAOnB,iBAAiB;EAEjB,gBAAgB;ECPlB,gBCXS;ECgBL,eAAW;ECbf,yBAAyB;EACzB,sBLkFsB;EMzDpB,+BAAU;;EATV,8CAAQ;EASR,iDAAU;AjBtBd;;AkBHY;;ENKR,mBAAmB;EAOnB,iBAAiB;EACjB,eAAe;EACf,gBAAgB;AZGpB;;AkBjBY;;ENgBN,qBHQwB;EGPxB,qBDiEkB;EChElB,eFH4C;AVQlD;;AkBvBY;;ENKR,mBAAmB;EAOnB,iBAAiB;EACjB,eAAe;EACf,gBAAgB;AZgBpB;;AkB9BY;;ENgBN,qBHQwB;EGPxB,qBDiEkB;EChElB,eFH4C;AVqBlD;;AEJE;EOnCA,kBCkBgD;EDjBhD,oBEoFsB;EFjFtB,oBEiFsB;EFlEtB,mBAAoC;EGXlC,mBAAmB;EAOnB,iBAAiB;EACjB,eAAe;EACf,gBAAgB;AZ6BpB;;AkB3CY;;ENKR,mBAAmB;EAOnB,iBAAiB;EACjB,eAAe;EACf,gBAAgB;AZoCpB;;AkBlDY;;ENgBN,uBHQwB;EGPxB,qBDiEkB;EChElB,kBFH4C;AVyClD;;AkBxDY;;ENKR,mBAAmB;EAOnB,iBAAiB;EACjB,eAAe;EACf,gBAAgB;AZiDpB;;AkB/DY;;ENgBN,uBHQwB;EGPxB,qBDiEkB;EChElB,kBFH4C;AVsDlD;;AmBjEE;EC4EA,0CAJgF;ER5D5E,qBHQwB;EGPxB,qBDiEkB;EChElB,eFH4C;AVyElD;;AmBpFE;EC4EA,wCAJgF;ER5D5E,uBHQwB;EGPxB,qBDiEkB;EChElB,kBFH4C;AV8FlD;;AmBzGE;;EC4DA,YAlBU;EAmBV,gBAAgB;ApBuDlB;;AmBpHE;;EC4DA,YAlBU;EAmBV,gBAAgB;ApB4DlB;;AmBzHE;;EC4DA,YAlBU;EAmBV,gBAAgB;ApBiElB;;AmB9HE;;EC4DA,YAlBU;EAmBV,gBAAgB;ApBsElB;;AmBnIE;;EC4DA,YAlBU;EAmBV,gBAAgB;ApB2ElB;;AmBxIE;;EH0BM,aAAa;AhBkHrB;;AgB5GA;EKvBE,eAAU;EACV,eAAU;EACV,aAAW;EACX,aAAW;EACX,aAAW;EACX,cAAY;EACZ,kBAAa;ELmBb,aAAa;EACb,eAAe;EMxBX,gBNyBoB;AhBqH1B;;AgBzHA;EAOI,oBAAoB;ED/BlB,eAAW;AfsJjB;;AgB9HA;EMrBM,oBXmEkB;EWnElB,qBXmEkB;AXqFxB;;AuBzKI;EN2BA,+BAAU;;EATV,8CAAQ;EASR,iDAAU;AjB0Jd;;AuBhLI;ENsBA,gCAAU;;EATV,+CAAQ;EASR,kDAAU;AjBgKd;;AuBjLI;ENiBA,kCAAU;;EATV,iDAAQ;EASR,oDAAU;AjBsKd;;AuBlLI;ENYA,kCAAU;;EATV,iDAAQ;EASR,oDAAU;AjB4Kd;;AuBnLI;ENOA,8CAAU;;EATV,yDAAQ;EASR,4DAAU;AjBkLd;;AwBzMM;EPuBF,+CAAU;;EATV,gEAAQ;EASR,mEAAU;AjBwLd;;AwB/MM;EPuBF,uCAAU;;EATV,wDAAQ;EASR,2DAAU;AjB8Ld;;AwBrNM;EPuBF,uCAAU;;EATV,wDAAQ;EASR,2DAAU;AjBoMd;;AwB3NM;EPuBF,qCAAU;;EATV,sDAAQ;EASR,yDAAU;AjB0Md;;AwBjOM;EPuBF,uCAAU;;EATV,wDAAQ;EASR,2DAAU;AjBgNd;;AwBvOM;EPuBF,mCAAU;;EATV,oDAAQ;EASR,uDAAU;AjBsNd;;AwB7OM;EPuBF,qCAAU;;EATV,sDAAQ;EASR,yDAAU;AjB4Nd;;AwBnPM;EPuBF,uCAAU;;EATV,wDAAQ;EASR,2DAAU;AjBkOd;;AwBzPM;EPuBF,qCAAU;;EATV,sDAAQ;EASR,yDAAU;AjBwOd;;AwB/PM;EPuBF,mCAAU;;EATV,oDAAQ;EASR,uDAAU;AjB8Od;;AwBrQM;EPuBF,yCAAU;;EATV,0DAAQ;EASR,6DAAU;AjBoPd;;AwB3QM;EPuBF,wCAAU;;EATV,yDAAQ;EASR,4DAAU;AjB0Pd;;AwBjRM;EPuBF,4CAAU;;EATV,6DAAQ;EASR,gEAAU;AjBgQd;;AwBvRM;EPuBF,yCAAU;;EATV,0DAAQ;EASR,6DAAU;AjBsQd;;AwB7RM;EPuBF,sCAAU;;EATV,uDAAQ;EASR,0DAAU;AjB4Qd;;AwBnSM;EPuBF,oCAAU;;EATV,qDAAQ;EASR,wDAAU;AjBkRd;;AwBzSM;EPuBF,yCAAU;;EATV,0DAAQ;EASR,6DAAU;AjBwRd;;AyB/SI;EFRF;IN2BI,cAAU;IAAV,sBAAU;EjBiSd;;EuBxTE;INuBE,cAAU;IAAV,yBAAU;EjB6Sd;;EuB/TE;INkBE,cAAU;IAAV,yBAAU;EjByTd;;EuBtUE;INaE,cAAU;IAAV,yBAAU;EjBqUd;;EuB7UE;INQE,cAAU;IAAV,yBAAU;EjBiVd;;EuBpVE;INGE,cAAU;IAAV,yBAAU;EjB6Vd;;EwBhXI;IPmBA,cAAU;IAAV,yBAAU;EjByWd;;EwB5XI;IPmBA,cAAU;IAAV,yBAAU;EjBqXd;;EwBxYI;IPmBA,cAAU;IAAV,yBAAU;EjBiYd;;EwBpZI;IPmBA,cAAU;IAAV,yBAAU;EjB6Yd;;EwBhaI;IPmBA,cAAU;IAAV,yBAAU;EjByZd;;EwB5aI;IPmBA,cAAU;IAAV,yBAAU;EjBqad;;EwBxbI;IPmBA,cAAU;IAAV,yBAAU;EjBibd;;EwBpcI;IPmBA,cAAU;IAAV,yBAAU;EjB6bd;;EwBhdI;IPmBA,cAAU;IAAV,yBAAU;EjBycd;;EwB5dI;IPmBA,cAAU;IAAV,yBAAU;EjBqdd;;EwBxeI;IPmBA,cAAU;IAAV,yBAAU;EjBied;;EwBpfI;IPmBA,cAAU;IAAV,yBAAU;EjB6ed;;EwBhgBI;IPmBA,cAAU;IAAV,yBAAU;EjByfd;;EwB5gBI;IPmBA,cAAU;IAAV,yBAAU;EjBqgBd;;EwBxhBI;IPmBA,cAAU;IAAV,yBAAU;EjBihBd;;EwBpiBI;IPmBA,cAAU;IAAV,yBAAU;EjB6hBd;;EwBhjBI;IPmBA,cAAU;IAAV,yBAAU;EjByiBd;AAvQF","file":"badge.css","sourcesContent":[null,"@charset \"UTF-8\";\n/* ------------------------------------ *\\\n  Badge\n\\* ------------------------------------ */\n.fr-badge {\n  --link-underline: none;\n  --link-blank-font: none;\n  --link-blank-content: none;\n  --text-spacing: 0;\n  --title-spacing: 0;\n  display: inline-flex;\n  flex-direction: row;\n  align-items: center;\n  z-index: 1;\n  --blend-full-size: 100%;\n}\n\n.fr-badge {\n  font-size: 0.875rem;\n  line-height: 1.5rem;\n  min-height: 1.5rem;\n  padding: 0rem 0.5rem;\n}\n\n.fr-badge--icon-left[class^=\"fr-icon-\"], .fr-badge--icon-left[class*=\" fr-icon-\"] {\n  flex-direction: row;\n  overflow: initial;\n  max-width: 100%;\n  max-height: none;\n}\n\n.fr-badge--icon-left[class^=\"fr-icon-\"]::before, .fr-badge--icon-left[class*=\" fr-icon-\"]::before {\n  margin-left: -0.25rem;\n  margin-right: 0.25rem;\n  font-size: 1rem;\n}\n\n.fr-badge--icon-left[class^=\"fr-fi-\"], .fr-badge--icon-left[class*=\" fr-fi-\"] {\n  flex-direction: row;\n  overflow: initial;\n  max-width: 100%;\n  max-height: none;\n}\n\n.fr-badge--icon-left[class^=\"fr-fi-\"]::before, .fr-badge--icon-left[class*=\" fr-fi-\"]::before {\n  margin-left: -0.25rem;\n  margin-right: 0.25rem;\n  font-size: 1rem;\n}\n\n.fr-badge--sm {\n  font-size: 0.75rem;\n  line-height: 1.25rem;\n  min-height: 1.125rem;\n  padding: 0 0.375rem;\n}\n\n.fr-badge--sm.fr-badge--icon-left[class^=\"fr-icon-\"], .fr-badge--sm.fr-badge--icon-left[class*=\" fr-icon-\"] {\n  flex-direction: row;\n  overflow: initial;\n  max-width: 100%;\n  max-height: none;\n}\n\n.fr-badge--sm.fr-badge--icon-left[class^=\"fr-icon-\"]::before, .fr-badge--sm.fr-badge--icon-left[class*=\" fr-icon-\"]::before {\n  margin-left: -0.1875rem;\n  margin-right: 0.25rem;\n  font-size: 0.75rem;\n}\n\n.fr-badge--sm.fr-badge--icon-left[class^=\"fr-fi-\"], .fr-badge--sm.fr-badge--icon-left[class*=\" fr-fi-\"] {\n  flex-direction: row;\n  overflow: initial;\n  max-width: 100%;\n  max-height: none;\n}\n\n.fr-badge--sm.fr-badge--icon-left[class^=\"fr-fi-\"]::before, .fr-badge--sm.fr-badge--icon-left[class*=\" fr-fi-\"]::before {\n  margin-left: -0.1875rem;\n  margin-right: 0.25rem;\n  font-size: 0.75rem;\n}\n\n.fr-badge {\n  font-size: 0.875rem;\n  line-height: 1.5rem;\n  min-height: 1.5rem;\n  padding: 0rem 0.5rem;\n  flex-direction: row;\n  overflow: initial;\n  max-width: 100%;\n  max-height: none;\n  font-weight: 700;\n  max-width: 100%;\n  text-transform: uppercase;\n  border-radius: 0.25rem;\n}\n\n.fr-badge::before {\n  font: normal 700 normal 1.5rem/1 dsfr-icon;\n}\n\n.fr-badge::before {\n  margin-left: -0.25rem;\n  margin-right: 0.25rem;\n  font-size: 1rem;\n}\n\n.fr-badge--sm {\n  font-size: 0.75rem;\n  line-height: 1.25rem;\n  min-height: 1.125rem;\n  padding: 0 0.375rem;\n  flex-direction: row;\n  overflow: initial;\n  max-width: 100%;\n  max-height: none;\n}\n\n.fr-badge--sm::before {\n  font: normal 700 normal 1rem/1 dsfr-icon;\n}\n\n.fr-badge--sm::before {\n  margin-left: -0.1875rem;\n  margin-right: 0.25rem;\n  font-size: 0.75rem;\n}\n\n.fr-badge.fr-badge--info::before, .fr-badge--sm.fr-badge--info::before {\n  content: \"\";\n  font-weight: 400;\n}\n\n.fr-badge.fr-badge--success::before, .fr-badge--sm.fr-badge--success::before {\n  content: \"\";\n  font-weight: 400;\n}\n\n.fr-badge.fr-badge--error::before, .fr-badge--sm.fr-badge--error::before {\n  content: \"\";\n  font-weight: 400;\n}\n\n.fr-badge.fr-badge--warning::before, .fr-badge--sm.fr-badge--warning::before {\n  content: \"\";\n  font-weight: 400;\n}\n\n.fr-badge.fr-badge--new::before, .fr-badge--sm.fr-badge--new::before {\n  content: \"\";\n  font-weight: 400;\n}\n\n.fr-badge.fr-badge--no-icon::before, .fr-badge--sm.fr-badge--no-icon::before {\n  content: none;\n}\n\n.fr-badge-group {\n  --ul-type: none;\n  --ol-type: none;\n  --ul-start: 0;\n  --ol-start: 0;\n  --xl-block: 0;\n  --li-bottom: 0;\n  --ol-content: none;\n  display: flex;\n  flex-wrap: wrap;\n  margin-bottom: 0;\n}\n\n.fr-badge-group > li {\n  display: inline-flex;\n  max-width: 100%;\n}\n\n.fr-badge-group .fr-badge {\n  margin-right: 0.5rem;\n  margin-bottom: 0.5rem;\n}\n\n.fr-badge {\n  color: var(--text-default-grey);\n  --blend: var(--background-contrast-grey-blend);\n  background-color: var(--background-contrast-grey);\n}\n\n.fr-badge--info {\n  color: var(--text-default-info);\n  --blend: var(--background-contrast-info-blend);\n  background-color: var(--background-contrast-info);\n}\n\n.fr-badge--error {\n  color: var(--text-default-error);\n  --blend: var(--background-contrast-error-blend);\n  background-color: var(--background-contrast-error);\n}\n\n.fr-badge--success {\n  color: var(--text-default-success);\n  --blend: var(--background-contrast-success-blend);\n  background-color: var(--background-contrast-success);\n}\n\n.fr-badge--warning {\n  color: var(--text-default-warning);\n  --blend: var(--background-contrast-warning-blend);\n  background-color: var(--background-contrast-warning);\n}\n\n.fr-badge--new {\n  color: var(--text-action-high-yellow-moutarde);\n  --blend: var(--background-contrast-yellow-moutarde-blend);\n  background-color: var(--background-contrast-yellow-moutarde);\n}\n\n.fr-badge--green-tilleul-verveine {\n  color: var(--text-label-green-tilleul-verveine);\n  --blend: var(--background-contrast-green-tilleul-verveine-blend);\n  background-color: var(--background-contrast-green-tilleul-verveine);\n}\n\n.fr-badge--green-bourgeon {\n  color: var(--text-label-green-bourgeon);\n  --blend: var(--background-contrast-green-bourgeon-blend);\n  background-color: var(--background-contrast-green-bourgeon);\n}\n\n.fr-badge--green-emeraude {\n  color: var(--text-label-green-emeraude);\n  --blend: var(--background-contrast-green-emeraude-blend);\n  background-color: var(--background-contrast-green-emeraude);\n}\n\n.fr-badge--green-menthe {\n  color: var(--text-label-green-menthe);\n  --blend: var(--background-contrast-green-menthe-blend);\n  background-color: var(--background-contrast-green-menthe);\n}\n\n.fr-badge--green-archipel {\n  color: var(--text-label-green-archipel);\n  --blend: var(--background-contrast-green-archipel-blend);\n  background-color: var(--background-contrast-green-archipel);\n}\n\n.fr-badge--blue-ecume {\n  color: var(--text-label-blue-ecume);\n  --blend: var(--background-contrast-blue-ecume-blend);\n  background-color: var(--background-contrast-blue-ecume);\n}\n\n.fr-badge--blue-cumulus {\n  color: var(--text-label-blue-cumulus);\n  --blend: var(--background-contrast-blue-cumulus-blend);\n  background-color: var(--background-contrast-blue-cumulus);\n}\n\n.fr-badge--purple-glycine {\n  color: var(--text-label-purple-glycine);\n  --blend: var(--background-contrast-purple-glycine-blend);\n  background-color: var(--background-contrast-purple-glycine);\n}\n\n.fr-badge--pink-macaron {\n  color: var(--text-label-pink-macaron);\n  --blend: var(--background-contrast-pink-macaron-blend);\n  background-color: var(--background-contrast-pink-macaron);\n}\n\n.fr-badge--pink-tuile {\n  color: var(--text-label-pink-tuile);\n  --blend: var(--background-contrast-pink-tuile-blend);\n  background-color: var(--background-contrast-pink-tuile);\n}\n\n.fr-badge--yellow-tournesol {\n  color: var(--text-label-yellow-tournesol);\n  --blend: var(--background-contrast-yellow-tournesol-blend);\n  background-color: var(--background-contrast-yellow-tournesol);\n}\n\n.fr-badge--yellow-moutarde {\n  color: var(--text-label-yellow-moutarde);\n  --blend: var(--background-contrast-yellow-moutarde-blend);\n  background-color: var(--background-contrast-yellow-moutarde);\n}\n\n.fr-badge--orange-terre-battue {\n  color: var(--text-label-orange-terre-battue);\n  --blend: var(--background-contrast-orange-terre-battue-blend);\n  background-color: var(--background-contrast-orange-terre-battue);\n}\n\n.fr-badge--brown-cafe-creme {\n  color: var(--text-label-brown-cafe-creme);\n  --blend: var(--background-contrast-brown-cafe-creme-blend);\n  background-color: var(--background-contrast-brown-cafe-creme);\n}\n\n.fr-badge--brown-caramel {\n  color: var(--text-label-brown-caramel);\n  --blend: var(--background-contrast-brown-caramel-blend);\n  background-color: var(--background-contrast-brown-caramel);\n}\n\n.fr-badge--brown-opera {\n  color: var(--text-label-brown-opera);\n  --blend: var(--background-contrast-brown-opera-blend);\n  background-color: var(--background-contrast-brown-opera);\n}\n\n.fr-badge--beige-gris-galet {\n  color: var(--text-label-beige-gris-galet);\n  --blend: var(--background-contrast-beige-gris-galet-blend);\n  background-color: var(--background-contrast-beige-gris-galet);\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge {\n    color: #3a3a3a;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge {\n    background-color: #eee;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--info {\n    color: #0063cb;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--info {\n    background-color: #e8edff;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--error {\n    color: #ce0500;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--error {\n    background-color: #ffe9e9;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--success {\n    color: #18753c;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--success {\n    background-color: #b8fec9;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--warning {\n    color: #b34000;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--warning {\n    background-color: #ffe9e6;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--new {\n    color: #695240;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--new {\n    background-color: #feebd0;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--green-tilleul-verveine {\n    color: #66673d;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--green-tilleul-verveine {\n    background-color: #fceeac;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--green-bourgeon {\n    color: #447049;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--green-bourgeon {\n    background-color: #c9fcac;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--green-emeraude {\n    color: #297254;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--green-emeraude {\n    background-color: #c3fad5;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--green-menthe {\n    color: #37635f;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--green-menthe {\n    background-color: #bafaee;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--green-archipel {\n    color: #006a6f;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--green-archipel {\n    background-color: #c7f6fc;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--blue-ecume {\n    color: #2f4077;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--blue-ecume {\n    background-color: #e9edfe;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--blue-cumulus {\n    color: #3558a2;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--blue-cumulus {\n    background-color: #e6eefe;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--purple-glycine {\n    color: #6e445a;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--purple-glycine {\n    background-color: #fee7fc;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--pink-macaron {\n    color: #8d533e;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--pink-macaron {\n    background-color: #fee9e6;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--pink-tuile {\n    color: #a94645;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--pink-tuile {\n    background-color: #fee9e7;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--yellow-tournesol {\n    color: #716043;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--yellow-tournesol {\n    background-color: #feecc2;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--yellow-moutarde {\n    color: #695240;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--yellow-moutarde {\n    background-color: #feebd0;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--orange-terre-battue {\n    color: #755348;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--orange-terre-battue {\n    background-color: #fee9e5;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--brown-cafe-creme {\n    color: #685c48;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--brown-cafe-creme {\n    background-color: #f7ecdb;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--brown-caramel {\n    color: #845d48;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--brown-caramel {\n    background-color: #f7ebe5;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--brown-opera {\n    color: #745b47;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--brown-opera {\n    background-color: #f7ece4;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--beige-gris-galet {\n    color: #6a6156;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-badge--beige-gris-galet {\n    background-color: #f3ede5;\n  }\n}\n","////\n/// Badge Main\n/// @group badge\n////\n\n/* ------------------------------------ *\\\n  Badge\n\\* ------------------------------------ */\n\n@import 'index';\n@import 'style/module';\n@import 'style/scheme';\n\n@include _badge-scheme;\n","////\n/// Link Tool : build\n/// @group link\n////\n\n@function _sort-sizes($sizes) {\n  $sorted-map: (\n    md: map_get($sizes, md)\n  );\n\n  @each $size, $size-settings in $sizes {\n    @if $size != md {\n      $sorted-map: map-merge($sorted-map, ($size: $size-settings));\n    }\n  }\n\n  @return $sorted-map;\n}\n\n@mixin _link-class($base, $size: md, $place: null, $align-on-content: false) {\n  $selector: '';\n\n  @if $size != md {\n    $selector: '#{$base}--#{$size}';\n  }\n\n  @if $align-on-content {\n    $selector: '#{$selector}#{$base}--align-on-content';\n  }\n\n  @if $place == only {\n    @if $selector == '' {\n      $selector: '#{$base}';\n    }\n    $selector: '#{$selector}:not([class*=\"#{str-slice(quote($base), 2)}--icon-\"])';\n  }\n  @else if $place == left or $place == right {\n    $selector: '#{$selector}#{$base}--icon-#{$place}';\n  }\n\n  @if $selector == '' {\n    $selector: $base;\n  }\n\n  #{$selector} {\n    @if $place != null {\n      @include has-icon {\n        @content;\n      }\n    }\n    @else {\n      @content;\n    }\n  }\n}\n\n@mixin _build-link-base {\n  @include disable-link-style;\n  @include set-text-margin(0);\n  @include set-title-margin(0);\n  @include display-flex(row, center, null, null, true);\n  @include z-index(over);\n  @include enable-blend;\n}\n\n@mixin _build-link($settings) {\n  $places: map_get($settings, places);\n  $sizes: _sort-sizes(map_get($settings, sizes));\n  $border-radius: map-get($settings, border-radius);\n  $align-on-content: map-get($settings, align-on-content);\n  $base: ns(map-get($settings, selector));\n\n  #{$base} {\n    @include _build-link-base;\n  }\n\n  @each $size, $size-settings in $sizes {\n    @include _link-class($base, $size) {\n      @include _build-link-size($size-settings, $border-radius);\n    }\n\n    @if $align-on-content {\n      @include _link-class($base, $size, null, true) {\n        @include _link-align-on-content($size, null, $size-settings);\n      }\n    }\n\n    @if $places != null {\n      @each $place in $places {\n        @include _link-class($base, $size, $place) {\n          @include _build-link-icon($size-settings, $place, $size, $size == md, $place == right);\n        }\n\n        @if $align-on-content {\n          @include _link-class($base, $size, $place, true) {\n            @include _link-align-on-content($size, $place, $size-settings);\n          }\n        }\n      }\n    }\n  }\n}\n\n@mixin build-link() {\n  @include _build-link($links-settings);\n}\n","////\n/// Core Tool : Reset\n/// @group core\n////\n\n@mixin a-reset {\n  text-decoration: none;\n  color: inherit;\n}\n\n@mixin enable-link-style() {\n  --link-underline: 0 1px 0 0 currentColor;\n  --link-blank-font: #{font-icon(sm, true)};\n  --link-blank-content: \"\\00a0#{icon-glyph(external-link-line, true)}\";\n}\n\n@mixin disable-link-style() {\n  --link-underline: none;\n  --link-blank-font: none;\n  --link-blank-content: none;\n}\n\n@mixin link-underline() {\n  box-shadow: var(--link-underline);\n}\n\n@mixin link-blank() {\n  @include after(var(--link-blank-content)) {\n    font: var(--link-blank-font);\n  }\n}\n","////\n/// Core Tool : Typography build\n/// @group core\n////\n\n@function get-text-style($font-size) {\n  @return map-get($text-styles, $font-size);\n}\n\n@function get-title-style($font-size) {\n  @return map-get($title-styles, $font-size);\n}\n\n@mixin _stylize($font-size, $styles, $prepend, $append) {\n  $style: map-get($styles, $font-size);\n\n  @if $prepend == null {\n    $prepend: '';\n  }\n\n  @if $append == null {\n    $append: '';\n  }\n\n  font-size: #{$prepend} #{px-rem($font-size)} #{$append};\n\n  @if map-has-key($style, line-height) {\n    line-height: #{$prepend} space(map-get($style, line-height)) #{$append};\n  }\n}\n\n@mixin _responsive-styles($settings, $styles, $is-responsive, $prepend, $append) {\n  $breakpoints: map-get($settings, breakpoints);\n\n  @if map-has-key($settings, weight) {\n    font-weight: #{$prepend} map-get($font-weight-scale, map-get($settings, weight)) #{$append};\n  }\n\n  @if $is-responsive {\n    @each $breakpoint, $size in $breakpoints {\n      @if $breakpoint == first {\n        @include _stylize($size, $styles, $prepend, $append);\n      }\n      @else {\n        @include respond-from($breakpoint) {\n          @include _stylize($size, $styles, $prepend, $append);\n        }\n      }\n    }\n  }\n  @else {\n    @if map-has-key($breakpoints, md) {\n      @include _stylize(map-get($breakpoints, md), $styles);\n    }\n    @else {\n      @include _stylize(map-get($breakpoints, first), $styles);\n    }\n  }\n}\n\n@mixin _space-text($settings) {\n  @include margin( var(#{'--' + map-get($settings, 'margin') + '-spacing'}) );\n}\n\n@mixin text-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($text-settings, $name);\n  $append: '';\n  @if $important {\n    $append: ' !important';\n  }\n\n  @include _responsive-styles($settings, $text-styles, $is-responsive, $prepend, $append);\n\n  @if $with-spacing {\n    @include _space-text($settings);\n  }\n}\n\n@mixin title-style($name, $with-spacing: false, $is-responsive: true, $prepend: null, $important: false) {\n  $settings: map-get($title-settings, $name);\n  $append: '';\n  @if $important {\n    $append: ' !important';\n  }\n\n  @include _responsive-styles($settings, $title-styles, $is-responsive, $prepend, $append);\n\n  @if $with-spacing {\n    @include _space-text($settings);\n  }\n}\n\n@mixin _set-typography-var($name, $value, $bp: null) {\n  @if $bp != null {\n    @include respond-from(#{$bp}) {\n      --#{$name}-spacing: #{space($value)};\n    }\n  }\n  @else {\n    --#{$name}-spacing: #{space($value)};\n  }\n}\n\n@mixin set-title-margin($margin, $bp:null) {\n  @include _set-typography-var(title, $margin, $bp);\n}\n\n@mixin set-text-margin($margin, $bp:null) {\n  @include _set-typography-var(text, $margin, $bp);\n}\n\n@mixin set-display-margin($margin, $bp:null) {\n  @include _set-typography-var(display, $margin, $bp);\n}\n","////\n/// Core Tool : Display display\n/// @group core\n////\n\n@mixin display-flex($flex-direction: row, $align-items: null, $justify-content: null, $flex-wrap: null, $inline: false) {\n\n  @if $inline == true {\n    display: inline-flex;\n  }\n  @else {\n    display: flex;\n  }\n\n  @if $flex-direction != null {\n    flex-direction: #{$flex-direction};\n  }\n\n  @if $align-items != null {\n    align-items: #{$align-items};\n  }\n\n  @if $justify-content != null {\n    justify-content: #{$justify-content};\n  }\n\n  @if $flex-wrap != null {\n    flex-wrap: #{$flex-wrap};\n  }\n}\n","////\n/// Core Tool : Spacing z-index\n/// @group core\n////\n\n/// Fonction de gestion des z-index\n/// @access public\n/// @param {String} $index-name - nom du calque de z-index\n@function z-index($index-name) {\n  @return map-get($z-indexes, $index-name);\n}\n\n/// Mixin de gestion des z-index\n/// @access public\n/// @param {String} $index-name - nom du calque de z-index\n@mixin z-index($index-name, $focus: false) {\n  z-index: z-index($index-name);\n  @if $focus {\n    $focus-z-index: z-index($index-name + '-focus');\n\n    @if $focus-z-index != null {\n      *:focus,\n      *:focus-visible {\n        z-index: #{$focus-z-index};\n      }\n    }\n  }\n}\n","////\n/// Core Setting : Spacing z-index\n/// @group core\n////\n\n/// Liste des z-index présent dans le DS\n/// @type map\n$z-indexes: (\n  auto: auto,\n  below: -2,\n  under: -1,\n  base: 0,\n  over: 1,\n  above: 2,\n  focus: 2000,\n  menu: 2500,\n  menu-focus: 3000,\n  nav: 3500,\n  nav-focus: 4000,\n  consent: 4500,\n  consent-focus: 5000,\n  modal: 5500,\n  modal-focus: 6000,\n  modal-footer: 6500,\n);\n","////\n/// Core Tool : Action Hover\n/// @group core\n////\n\n@mixin hover-media-query () {\n  @media (hover: hover) and (pointer: fine) {\n    @content;\n  }\n}\n\n@mixin hover-type-selector($elements, $type: all, $check-disabled: false) {\n  $selectors: ();\n\n  @each $element, $setting in $elements {\n    $hover: map-get($setting, hover);\n    $selector: map-get($setting, selector);\n    @if $hover {\n      @if $type == map-get($hover, type) or $type == all {\n        $nested: $selector;\n        @if $check-disabled {\n          $nested: nest($selector, map-get($hover, selector));\n        }\n        $associated: $nested;\n        @if & != null and quote(&) != ':root' {\n          $associated: selector-associate(quote(&), $nested);\n        }\n        $selectors: append($selectors, $associated, 'comma');\n      }\n    }\n  }\n\n  @at-root #{$selectors} {\n    @content;\n  }\n}\n\n@mixin hover-blend($background-images: (), $background-sizes: (), $background-positions: ()) {\n  --hsla: #{css-hsl-alpha(var(--blend), var(--a))};\n  --blend-size: 0; // 2048px 2048px;\n  --blend-position: 50%;\n  --a: 0;\n\n  @include hover-blend-background($background-images, $background-sizes, $background-positions);\n\n  &:hover {\n    --a: #{$hover-alpha};\n  }\n\n  &:active {\n    --a: #{$active-alpha};\n  }\n}\n\n@mixin hover-blend-background-size($background-sizes: ()) {\n  background-size: $background-sizes, var(--blend-size);\n}\n\n@mixin hover-blend-background($background-images: (), $background-sizes: (), $background-positions: ()) {\n  background-repeat: no-repeat;\n  @include hover-blend-background-size($background-sizes);\n  background-position: $background-positions, var(--blend-position);\n  background-image: $background-images, radial-gradient(circle at center, var(--hsla), var(--hsla) 3%);\n}\n\n@mixin enable-blend() {\n  --blend-full-size: 100%;\n}\n\n@mixin disable-blend() {\n  --blend-full-size: 0;\n}\n","////\n/// Link Tool : sizes\n/// @group link\n////\n\n@mixin _build-link-size($size-settings, $border-radius: false) {\n  $font-size: map_get($size-settings, font-size);\n  $style: get-text-style($font-size);\n  $line-height: space(map_get($style, line-height));\n  font-size: px-rem($font-size);\n  line-height: $line-height;\n\n  $min-height: space(map_get($size-settings, min-height));\n  min-height: $min-height;\n\n  $max-icon-height: icon-size(md);\n\n  @if map_has_key($size-settings, icon-only) {\n    $max-icon-height: icon-size(map_get($size-settings, icon-only));\n  }\n  @else if map_has_key($size-settings, icon) {\n    $max-icon-height: icon-size(map_get($size-settings, icon));\n  }\n\n  $space-y: max($line-height, $max-icon-height);\n  $padding-x: space(map_get($size-settings, padding-x));\n  $padding-y: max(($min-height - $space-y) / 2, 0);\n\n  padding: #{$padding-y} #{$padding-x};\n\n  @if $border-radius {\n    border-radius: #{$min-height / 2};\n  }\n}\n\n@function _link-icon-margin($size) {\n  @return icon-size($size) / 4;\n}\n\n@mixin _link-align-on-content($size, $place, $size-settings) {\n  $padding-x: space(map_get($size-settings, padding-x));\n  $icon-margin: _link-icon-margin(map_get($size-settings, icon));\n\n  @if $place == null {\n    margin-left: -($padding-x);\n    margin-right: -($padding-x);\n  }\n  @else if $place == left {\n    margin-left: -($padding-x - $icon-margin);\n    margin-right: -($padding-x);\n  }\n  @else if $place == right {\n    margin-left: -($padding-x);\n    margin-right: -($padding-x - $icon-margin);\n  }\n  @else if $place == only {\n    $icon-size: icon-size(map_get($size-settings, icon-only));\n    $min-height: space(map_get($size-settings, min-height));\n    $padding-x: ($min-height - $icon-size) / 2;\n\n    margin-left: -($padding-x);\n    margin-right: -($padding-x);\n  }\n}\n","////\n/// Core Function : units\n/// @group core\n////\n\n/// Retourne la valeur numérique sans unité.\n/// @access public\n/// @param {String} $value - la valeur avec unité\n/// @example\n///   clean-unit(12px);\n@function clean-unit($value) {\n  @if $value == null {\n    @return null;\n  }\n  @return ($value / ($value * 0 + 1));\n}\n\n/// Return rem from px\n///\n/// @param {String} $px - Font size in pixels\n/// @param {String} $root-font-size [$base-font-size-px] - Pixel font size for conversion\n///\n/// @example scss - Get 1rem conversion from 16px, using $base-font-size-px\n///   .foo {\n///     font-size: px-rem(12px);\n///   }\n@function px-rem($px, $root-font-size: 16px) {\n  @return clean-unit($px / $root-font-size) * 1rem;\n}\n\n@function is-unit($value, $unit) {\n  $v: to-lower-case(quote($value));\n  $u: quote($unit);\n  @return str-index($v, $u) == (str-length($v) - str-length($u) + 1);\n}\n\n@function is-basic-unit($value) {\n  $units: em ex '%' px cm mm in pt pc ch rem vw vh vmin vmax;\n  @each $unit in $units {\n    @if is-unit($value, $unit) {\n      @return true;\n    }\n  }\n  @return false;\n}\n","////\n/// Core Function : Spacing space\n/// @group core\n////\n\n/// Return space value from type map and convert to rem.\n///\n/// @param {Number} $value - valeur de l'espacement, permet de convertir cet espacement de v (4px) ou w (8px) en rem\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     margin-bottom: space(6v);\n///   }\n@function space($value) {\n  @if type-of($value) == list {\n    $list: ();\n    $separator: list-separator($value);\n    @each $v in $value {\n      $list: append($list, space($v), $separator);\n    }\n    @return $list;\n  }\n  @if type-of($value) == string {\n    $c: str-index($value, '(');\n    @if $c {\n      $b: null;\n      $n: 0;\n      $i: $c + 1;\n      $l: str-length($value);\n      @while $b == null and $i <= $l {\n        $char: str-slice($value, $i, $i);\n        @if $char == '(' {\n          $n: $n + 1;\n        }\n        @else if $char == ')' {\n          @if $n > 0 {\n            $n: $n - 1;\n          }\n          @else {\n            $b: $i;\n          }\n        }\n        $i: $i + 1;\n      }\n\n      $start: unquote('');\n      $middle: space(str-slice($value, $c + 1, $b - 1));\n      $end: unquote('');\n\n      @if $c > 1 {\n        $start: space(str-slice($value, 1, $c - 1));\n      }\n\n      $l: str-length($value);\n      @if $b < $l {\n        $end: space(str-slice($value, $b + 1, $l));\n      }\n\n      @return unquote('#{$start}(#{$middle})#{$end}');\n    }\n\n    @if str-index($value, ',') {\n      @return space(str-split($value, ','));\n    }\n\n    @if str-index($value, ' ') {\n      @return space(str-split($value, ' '));\n    }\n\n    $value: unquote($value);\n  }\n\n  @if $value == 0 {\n    @return $value;\n  }\n\n  @if length($value) > 1 {\n    $result: ();\n    @each $v in $value {\n      $result: append($result, space($v));\n    }\n    @return $result;\n  }\n\n  @if is-basic-unit($value) {\n    @return $value;\n  }\n\n  $v: quote($value);\n\n  $q: str-to-num(unquote(str_slice($v, 0, str_length($v) - 1)));\n  $unit: str_slice($v, str-length($v), str_length($v));\n\n  @if is-unit($value, v) {\n    @return $q * 0.25rem;\n  }\n  @else if is-unit($value, w) {\n    @return $q * 0.5rem;\n  }\n  @return $value;\n}\n","////\n/// Link Tool : icons\n/// @group link\n////\n\n@mixin _build-link-icon($size-settings, $place, $size:md, $font-icon: false, $reverse: false) {\n\n  $icon-size: icon-size(map_get($size-settings, icon));\n\n  @if $place == only {\n    $icon-size: icon-size(map_get($size-settings, icon-only));\n  }\n\n  @if $reverse {\n    flex-direction: row-reverse;\n  }\n  @else {\n    flex-direction: row;\n  }\n\n  $icon-margin: _link-icon-margin(map_get($size-settings, icon));\n  $icon-margin-x: space(map_get($size-settings, icon-margin-x));\n\n  @if $place == left {\n    overflow: initial;\n    max-width: 100%;\n    max-height: none;\n    @include before {\n      margin-left: -($icon-margin);\n      margin-right: $icon-margin-x;\n      font-size: $icon-size;\n    }\n  }\n  @else if $place == right {\n    overflow: initial;\n    max-width: 100%;\n    max-height: none;\n    @include before {\n      margin-right: -($icon-margin);\n      margin-left: $icon-margin-x;\n      font-size: $icon-size;\n    }\n  }\n  @else if $place == only {\n    $min-height: space(map_get($size-settings, min-height));\n    $padding-x: ($min-height - $icon-size) / 2;\n\n    overflow: hidden;\n    white-space: nowrap;\n    max-width: $min-height;\n    max-height: $min-height;\n    padding-left: $padding-x;\n    padding-right: $padding-x;\n\n    @include before {\n      margin-left: 0;\n      margin-right: $padding-x;\n      font-size: $icon-size;\n    }\n  }\n}\n","////\n/// Core Tool : Typography font-weight\n/// @group core\n////\n\n/// Return font-weight value from font-weight map.\n///\n/// @param {String} $scale [\"regular\"] - Type scale value from `$weight-scale` (Default to \"regular\" = 400)\n///\n/// @example scss - Set font-weight to bold (700)\n///   .foo {\n///     font-weight: font-weight(\"bold\");\n///   }\n\n@function font-weight($scale: regular) {\n  @return map-get($font-weight-scale, $scale);\n}\n\n@mixin font-weight($scale) {\n  font-weight: font-weight($scale);\n}\n\n@mixin font-weights() {\n  @each $name, $weight in $font-weight-scale {\n    & #{ns('text--' + $name)} {\n      font-weight: #{$weight} !important;\n    }\n  }\n}\n","////\n/// Core Setting : Typography font-weight\n/// @group core\n////\n\n$font-weight-scale: (\n  light: 300,\n  regular: 400,\n  bold: 700,\n  xx-bold: 900\n);\n","////\n/// Core Tool : Spacing size\n/// @group core\n////\n\n@mixin width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n  }\n}\n\n@mixin min-width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      min-width: #{space($width)};\n    }\n  }\n}\n\n@mixin max-width($width:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      max-width: #{space($width)};\n    }\n  }\n}\n\n@mixin height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      min-height: #{space($height)};\n    }\n  }\n}\n\n@mixin max-height($height:null, $from: null) {\n  @include respond-from($from) {\n    @if $height != null {\n      max-height: #{space($height)};\n    }\n  }\n}\n\n@mixin size($width:null, $height:null, $from: null) {\n  @include respond-from($from) {\n    @if $width != null {\n      width: #{space($width)};\n    }\n    @if $height != null {\n      height: #{space($height)};\n    }\n  }\n}\n\n@mixin min-size($min-width:null, $min-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $min-width != null {\n      min-width: #{space($min-width)};\n    }\n    @if $min-height != null {\n      min-height: #{space($min-height)};\n    }\n  }\n}\n\n@mixin max-size($max-width:null, $max-height:null, $from: null) {\n  @include respond-from($from) {\n    @if $max-width != null {\n      max-width: #{space($max-width)};\n    }\n    @if $max-height != null {\n      max-height: #{space($max-height)};\n    }\n  }\n}\n","////\n/// Badge Module\n/// @group badge\n////\n\n@include build-badge();\n\n#{ns(badge)} {\n  @include nest-badge(md, left, null, null, false);\n  @include font-weight(bold);\n  @include max-width(100%);\n  text-transform: uppercase;\n  border-radius: space(1v);\n\n  &--sm {\n    @include nest-badge(sm, left, null, null, false);\n  }\n\n  &,\n  &--sm {\n    &#{ns(badge)}--info {\n      @include icon(info-fill, null);\n    }\n\n    &#{ns(badge)}--success {\n      @include icon(success-fill, null);\n    }\n\n    &#{ns(badge)}--error {\n      @include icon(error-fill, null);\n    }\n\n    &#{ns(badge)}--warning {\n      @include icon(warning-fill, null);\n    }\n\n    &#{ns(badge)}--new {\n      @include icon(flashlight-fill, null);\n    }\n\n    &#{ns(badge)}--no-icon {\n      @include before {\n        content: none;\n      }\n    }\n  }\n}\n\n#{ns-group(badge)} {\n  @include disable-list-style;\n  display: flex;\n  flex-wrap: wrap;\n  @include margin-bottom(0);\n\n  > li {\n    display: inline-flex;\n    @include max-width(100%);\n  }\n\n  #{ns(badge)} {\n    @include margin-right(2v);\n    @include margin-bottom(2v);\n  }\n}\n","////\n/// Core Color Tools : Element\n/// @group core\n////\n\n$ACCENT: none;\n\n@mixin _scheme-element($prop, $context, $tokens, $options: (), $value: $COLOR) {\n  $legacy: map-get($options, legacy);\n  $important: map-get($options, important);\n  $hover: map-get($options, hover);\n  $standalone: map-get($options, standalone);\n\n  $tokens: normalise-tokens($tokens, $context);\n  $type: decision;\n  $options: (var: true);\n  @if $legacy or $standalone {\n    $type: hex;\n    $option: (theme: light);\n  }\n  $colors: get-colors($tokens, $type, $options);\n  $result: get-result($colors, $value);\n  $result: important($result, $important);\n\n  @if $hover and $context == background and $legacy == false and length($tokens) == 1 {\n    $blend: get-color(nth($tokens, 1), decision, (var: true, blend: true));\n    $blend: important($blend, $important);\n\n    --blend: #{$blend};\n  }\n\n  @if $legacy {\n    @include legacy(ie11) {\n      #{$prop}: #{$result};\n    }\n  }\n  @else {\n    #{$prop}: #{$result};\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-bg-color($tokens, $options:()) {\n  @if not map-has-key($options, hover) {\n    $options: map-merge($options, (hover: true));\n  }\n  @include _scheme-element(background-color, background, $tokens, $options);\n}\n\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n///   - hover {boolean}: si true, surcharge la valeur de blend pour être héritée\n@mixin scheme-element-bg-transparent($options) {\n  $legacy: map-get($options, legacy);\n  $important: map-get($options, important);\n  $hover: map-get($options, hover);\n\n  $value: important(transparent, $important);\n\n  @if $important {\n    $value: #{$value} !important;\n  }\n\n  @if $legacy {\n    @include legacy(ie11) {\n      background-color: transparent;\n    }\n  }\n  @else {\n    background-color: transparent;\n    @if $hover {\n      --blend: inherit;\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-bg-image-color($tokens, $options, $value: linear-gradient(0deg, $COLOR, $COLOR)) {\n  $d: get-tokens-length($tokens);\n  @if $d > 1 and $value == linear-gradient(0deg, $COLOR, $COLOR) {\n    $transformed: ();\n    @for $i from 1 through $d {\n      $c: unquote('$color##{$i}');\n      $transformed: append($transformed, linear-gradient(0deg, $c, $c), comma);\n    }\n    $value: $transformed;\n  }\n  @include _scheme-element(background-image, background, $tokens, $options, $value);\n}\n\n/// Ajout d'une couleur de texte sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-text-color($tokens, $options) {\n  @include _scheme-element(color, text, $tokens, $options);\n}\n\n/// Ajout d'une couleur de fill sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-fill-color($tokens, $options) {\n  @include _scheme-element(fill, background , $tokens, $options);\n}\n\n/// Ajout d'une couleur de border sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n///   - side {String}: le côté affecté. valeurs: top, right, bottom, left\n/// @param {List} $value - définition des propriétés de border\n@mixin scheme-element-border-color($tokens, $options, $value:1px solid $COLOR) {\n  $prop:border;\n  @if map-has-key($options, side) {\n    $prop:border-#{map-get($options, side)};\n  }\n  @include _scheme-element($prop, border, $tokens, $options, $value);\n}\n\n@mixin scheme-element-no-border($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    border: 0;\n  }\n}\n\n/// Ajout d'une couleur d'outline sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés d'outline\n@mixin scheme-element-outline-color($tokens, $options, $value:1px solid $COLOR) {\n  @include _scheme-element(outline, border, $tokens, $options, $value);\n}\n\n/// Ajout d'une couleur de box-shadow sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés de box-shadow\n@mixin scheme-element-box-shadow-color($tokens, $options, $value: all-1-in) {\n  $has-keys: true;\n  $transformed: ();\n  $d: get-tokens-length($tokens);\n  $i: 1;\n  @each $v in $value {\n    @if map-has-key($box-shadows, $v) {\n      $transformed: append($transformed, _get-box-shadow($v, $i), comma);\n      @if $i < $d {\n        $i: $i + 1;\n      }\n    }\n    @else {\n      $has-keys: false;\n    }\n  }\n  @if $has-keys {\n    $value: $transformed;\n  }\n  @include _scheme-element(box-shadow, border, $tokens, $options, space($value));\n}\n\n/// Supprime la shadow-box sur l'élément\n/// @access public\n/// @param {string} $breakpoint - la shadow-box est retiré à partir d'un breakpoint si celui-ci est défini\n@mixin scheme-element-no-box-shadow($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    box-shadow: none;\n  }\n}\n","////\n/// Core Tool : Selector pattern\n/// @group core\n////\n\n@mixin _class-pattern($selector, $unify: true) {\n  @if & == null {\n    @at-root #{$selector} {\n      @content;\n    }\n  }\n  @else if $unify {\n    @at-root #{selector-unify(&, $selector)} {\n      @content;\n    }\n  }\n  @else {\n    #{$selector} {\n      @content;\n    }\n  }\n}\n\n@mixin class-contains($unify: true, $patterns...) {\n\n  @if length($patterns) == 1 and length(nth($patterns, 1)) > 1 {\n    $patterns: nth($patterns, 1);\n  }\n\n  $selectors: '';\n\n  @each $pattern in $patterns {\n    $selectors: '#{$selectors}[class*=\"#{$pattern}\"]';\n  }\n\n  @include _class-pattern($selectors, $unify) {\n    @content;\n  }\n}\n\n@mixin class-not-contains($unify: true, $patterns...) {\n\n  @if length($patterns) == 1 and length(nth($patterns, 1)) > 1 {\n    $patterns: nth($patterns, 1);\n  }\n\n  $selectors: '';\n  @each $pattern in $patterns {\n    $selectors: '#{$selectors}:not([class*=\"#{$pattern}\"])';\n  }\n\n  @include _class-pattern($selectors, $unify) {\n    @content;\n  }\n}\n\n@mixin class-start-with($start, $unify: true) {\n  @include _class-pattern(class-start-with($start), $unify) {\n    @content;\n  }\n}\n\n@mixin class-not-start-with($start, $unify: true) {\n  @include _class-pattern(class-not-start-with($start), $unify) {\n    @content;\n  }\n}\n\n@mixin class-end-with($end, $unify: true) {\n  @include _class-pattern(class-end-with($end), $unify) {\n    @content;\n  }\n}\n\n@mixin class-not-end-with($end, $unify: true) {\n  @include _class-pattern(class-not-end-with($end), $unify) {\n    @content;\n  }\n}\n\n@mixin class-is-ns($unify: true) {\n  @include class-start-with(ns('', ''), $unify) {\n    @content;\n  }\n}\n\n@mixin class-is-not-ns($unify: true) {\n  @include class-not-start-with(ns('', ''), $unify) {\n    @content;\n  }\n}\n","////\n/// Core Tool : Selector pseudo\n/// @group core\n////\n\n@mixin _pseudo($type:before, $content:null, $display:null) {\n  @if $type != after and $type != before and $type != marker and $type != (before after) {\n    @error '$type must be before or after element';\n  }\n\n  $selector: ();\n\n  @each $pseudo in $type {\n    $selector: append($selector, '&::#{$pseudo}', 'comma');\n  }\n\n  #{$selector} {\n\n    @if $content != null {\n      content: $content;\n    }\n\n    @if $display != null {\n      display: #{$display};\n    }\n\n    @content;\n  }\n}\n\n@mixin before($content: null, $display: null) {\n  @include _pseudo(before, $content, $display) {\n    @content;\n  }\n}\n\n@mixin after($content: null, $display: null) {\n  @include _pseudo(after, $content, $display) {\n    @content;\n  }\n}\n\n@mixin marker($content: null, $display: null) {\n  @include _pseudo(marker, $content, $display) {\n    @content;\n  }\n}\n","////\n/// Core Tool : Icon\n/// @group core\n////\n\n/// Return icon size from map\n/// @param {String} $size [\"md\"] - Icon size from `$icon-size-map` (Default to \"md\" = 16px)\n///\n/// @example scss - Set icon size to `SM` (12px)\n///   .foo {\n///     width: icon-size(sm);\n///     height: icon-size(sm);\n///   }\n@function icon-size($size: md) {\n  @return px-rem(map-get($icon-size-map, $size));\n}\n\n@mixin icon-size($size:md) {\n  font-size: #{icon-size($size)} !important;\n}\n\n@mixin with-icon($size:md) {\n  @include has-icon {\n    @include before {\n      @if $size != md {\n        @include icon-size($size);\n      }\n      @content;\n    }\n  }\n}\n\n@mixin generate-icons($base, $deprecated: false) {\n  $icons-settings: $icons-settings;\n  @if $deprecated {\n    $icons-settings: $icons-settings-deprecated;\n  }\n  @each $icon, $setting in $icons-settings {\n    #{ns($base + '-' + $icon)} {\n      @include before(icon-glyph($icon, $deprecated));\n      @if is-deprecated($icon) {\n        @include before {\n          font-weight: 700;\n        }\n      }\n    }\n  }\n}\n\n@function icon-glyph($icon, $deprecated: false, $is-ligature: false) {\n  $icon-settings: map-get($icons-settings, $icon);\n  @if is-deprecated($icon) or $deprecated {\n    $icon-settings: map-get($icons-settings-deprecated, $icon);\n  }\n  @if $is-ligature {\n    @return \"#{map-get($icon-settings, ligature)}\";\n  }\n  @else {\n    @return \"#{map-get($icon-settings, codepoint)}\";\n  }\n}\n\n@function is-deprecated($icon) {\n  @return not map-has-key($icons-settings, $icon);\n}\n\n@function get-icons-settings-version($deprecated: false) {\n  @if $deprecated {\n    @return $icons-settings-deprecated;\n  }\n  @else {\n    @return $icons-settings;\n  }\n}\n\n@mixin icon-content($icon) {\n  content: icon-glyph($icon);\n  font-weight: 400;\n  @if is-deprecated($icon) {\n    font-weight: 700;\n  }\n}\n\n@function font-icon($size: md, $deprecated: false) {\n  $font-weight: normal;\n  @if $deprecated {\n    $font-weight: 700;\n  }\n  @return normal $font-weight normal #{icon-size($size)}/1 #{$namespace}-icon;\n}\n\n@mixin font-icon($size: md, $deprecated: false) {\n  font: font-icon($size, $deprecated);\n}\n\n@mixin icon($icon: null, $size: md, $pseudo: before) {\n  @include _pseudo($pseudo) {\n    @if $size != null {\n      $deprecated: is-deprecated($icon);\n      @include font-icon($size, $deprecated);\n    }\n\n    @if $icon != null {\n      @include icon-content($icon);\n    }\n\n    @content;\n  }\n}\n","////\n/// Core Tool : Reset list\n/// @group core\n////\n\n@mixin enable-list-style() {\n  $selector: null;\n\n  @if & == null {\n    $selector: ':root';\n  }\n\n  @include nest($selector) {\n    --ul-type: \"●\\00a0\\00a0\";\n    --ol-type: decimal;\n    --ul-start: #{space(4v)};\n    --ol-start: #{space(6v)};\n    --xl-block: #{space(2v)};\n    --li-bottom: #{space(1v)};\n    --xl-base: 1em;\n    --ol-content: counters(li-counter, \".\") \".\\00a0\\00a0\";\n  }\n}\n\n@mixin disable-list-style() {\n  --ul-type: none;\n  --ol-type: none;\n  --ul-start: 0;\n  --ol-start: 0;\n  --xl-block: 0;\n  --li-bottom: 0;\n  --ol-content: none;\n}\n","////\n/// Core Tool : Spacing space\n/// @group core\n////\n\n/// Set space property\n///\n/// @param {String} $property [\"margin\"] - propriété à appliquer à l'espacement `[\"margin\", \"padding\"]`\n/// @param {Number | list} $value [2] - valeur de l'espacement en v ou w. peut être une liste si la direction n'est pas renseignée\n/// @param {String} $direction - direction de l'espacement `[\"x\", \"y\", \"top\", \"right\", \"bottom\", \"left\"]`\n///\n/// @example scss - Set margin-bottom to 24px\n///   .foo {\n///     @include _spacing(\"margin\", 6v, \"bottom\");\n///   }\n@mixin _spacing($property: margin, $value: 0, $direction: null) {\n  $v: space($value);\n  @if $direction != null {\n    @if $direction == 'x' {\n      #{$property}-left: $v;\n      #{$property}-right: $v;\n    }\n    @else if $direction == 'y' {\n      #{$property}-top: $v;\n      #{$property}-bottom: $v;\n    }\n    @else {\n      #{$property}-#{$direction}: $v;\n    }\n  }\n  @else {\n    #{$property}: $v;\n  }\n}\n\n@mixin _spacing-from($property: margin, $value: 0, $direction: null, $from: null) {\n  @include respond-from($from) {\n    @include _spacing($property, $value, $direction);\n  }\n}\n\n@mixin padding($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(padding, $values, null, $from);\n}\n\n@mixin padding-x($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'x', $from);\n}\n\n@mixin padding-y($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'y', $from);\n}\n\n@mixin padding-top($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'top', $from);\n}\n\n@mixin padding-right($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'right', $from);\n}\n\n@mixin padding-bottom($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'bottom', $from);\n}\n\n@mixin padding-left($value: 0, $from: null) {\n  @include _spacing-from(padding, $value, 'left', $from);\n}\n\n@mixin margin($values: 0 0 0 0, $from: null) {\n  @include _spacing-from(margin, $values, null, $from);\n}\n\n@mixin margin-x($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'x', $from);\n}\n\n@mixin margin-y($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'y', $from);\n}\n\n@mixin margin-top($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'top', $from);\n}\n\n@mixin margin-right($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'right', $from);\n}\n\n@mixin margin-bottom($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'bottom', $from);\n}\n\n@mixin margin-left($value: 0, $from: null) {\n  @include _spacing-from(margin, $value, 'left', $from);\n}\n","////\n/// Badge Module\n/// @group badge\n////\n\n@mixin _badge-scheme($legacy: false) {\n  #{ns(badge)} {\n    @include scheme-element-text-color(default grey, (legacy: $legacy));\n    @include scheme-element-bg-color(contrast grey, (legacy: $legacy));\n\n    &--info {\n      @include scheme-element-text-color(default info, (legacy: $legacy));\n      @include scheme-element-bg-color(contrast info, (legacy: $legacy));\n    }\n\n    &--error {\n      @include scheme-element-text-color(default error, (legacy: $legacy));\n      @include scheme-element-bg-color(contrast error, (legacy: $legacy));\n    }\n\n    &--success {\n      @include scheme-element-text-color(default success, (legacy: $legacy));\n      @include scheme-element-bg-color(contrast success, (legacy: $legacy));\n    }\n\n    &--warning {\n      @include scheme-element-text-color(default warning, (legacy: $legacy));\n      @include scheme-element-bg-color(contrast warning, (legacy: $legacy));\n    }\n\n    &--new {\n      @include scheme-element-text-color(action-high yellow-moutarde, (legacy: $legacy));\n      @include scheme-element-bg-color(contrast yellow-moutarde, (legacy: $legacy));\n    }\n\n    @include accent-modifiers {\n      @include scheme-element-text-color(label accent, (legacy: $legacy));\n      @include scheme-element-bg-color(contrast accent, (legacy: $legacy));\n    }\n  }\n}\n","////\n/// Core Tools : Color accent\n/// @group schemes\n////\n\n@mixin accent-modifiers () {\n  $tints: ();\n  $accent: map-get($scheme-sets, accent);\n  @each $tint, $value in $accent {\n    $tints: append($tints, $tint);\n  }\n\n  @at-root {\n    @each $tint in $tints {\n      &--#{$tint} {\n        $ACCENT: #{$tint} !global;\n        @content;\n      }\n    }\n    $ACCENT: none !global;\n  }\n}\n","////\n/// Legacy Tool : legacy\n/// @group legacy\n////\n\n/// Styles spécifiques pour les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n      @content;\n    }\n  }\n}\n\n/// Styles spécifiques pour les plateformes modernes, excluant les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin not-legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @supports not (-ms-high-contrast: none) {\n      @content;\n    }\n  }\n}\n"]}