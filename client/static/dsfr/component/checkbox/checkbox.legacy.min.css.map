{"version":3,"sources":["<no source>","../../../../../../src/legacy/style/tool/_legacy.scss","../../../../../../src/core/style/selector/tool/_pseudo.scss","../../../../../../src/core/style/color/tool/_element.scss","../../../checkbox.legacy.css","../../../../../../src/component/checkbox/style/_scheme.scss"],"names":[],"mappings":"AAAA;;GAAA,ACcI,2DCEF,qDCiBI,kCCHJ,CFdA,wICiBI,wBAAU,CAAV,SAAU,CCGd,CFpBA,6HCiBI,kCCeJ,CFhCA,6ICiBI,wBAAU,CAAV,aCqBJ,CCIG,qDFzBC,aCiCJ,CFlDA,iCCiBI,kCCuCJ,CCDG,qDFtCC,aC6CJ,CF9DA,iCCiBI,kCCmDJ,CArDF","file":"checkbox.legacy.min.css","sourcesContent":[null,"////\n/// Legacy Tool : legacy\n/// @group legacy\n////\n\n/// Styles spécifiques pour les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n      @content;\n    }\n  }\n}\n\n/// Styles spécifiques pour les plateformes modernes, excluant les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin not-legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @supports not (-ms-high-contrast: none) {\n      @content;\n    }\n  }\n}\n","////\n/// Core Tool : Selector pseudo\n/// @group core\n////\n\n@mixin _pseudo($type:before, $content:null, $display:null) {\n  @if $type != after and $type != before and $type != marker and $type != (before after) {\n    @error '$type must be before or after element';\n  }\n\n  $selector: ();\n\n  @each $pseudo in $type {\n    $selector: append($selector, '&::#{$pseudo}', 'comma');\n  }\n\n  #{$selector} {\n\n    @if $content != null {\n      content: $content;\n    }\n\n    @if $display != null {\n      display: #{$display};\n    }\n\n    @content;\n  }\n}\n\n@mixin before($content: null, $display: null) {\n  @include _pseudo(before, $content, $display) {\n    @content;\n  }\n}\n\n@mixin after($content: null, $display: null) {\n  @include _pseudo(after, $content, $display) {\n    @content;\n  }\n}\n\n@mixin marker($content: null, $display: null) {\n  @include _pseudo(marker, $content, $display) {\n    @content;\n  }\n}\n","////\n/// Core Color Tools : Element\n/// @group core\n////\n\n$ACCENT: none;\n\n@mixin _scheme-element($prop, $context, $tokens, $options: (), $value: $COLOR) {\n  $legacy: map-get($options, legacy);\n  $important: map-get($options, important);\n  $hover: map-get($options, hover);\n  $standalone: map-get($options, standalone);\n\n  $tokens: normalise-tokens($tokens, $context);\n  $type: decision;\n  $options: (var: true);\n  @if $legacy or $standalone {\n    $type: hex;\n    $option: (theme: light);\n  }\n  $colors: get-colors($tokens, $type, $options);\n  $result: get-result($colors, $value);\n  $result: important($result, $important);\n\n  @if $hover and $context == background and $legacy == false and length($tokens) == 1 {\n    $blend: get-color(nth($tokens, 1), decision, (var: true, blend: true));\n    $blend: important($blend, $important);\n\n    --blend: #{$blend};\n  }\n\n  @if $legacy {\n    @include legacy(ie11) {\n      #{$prop}: #{$result};\n    }\n  }\n  @else {\n    #{$prop}: #{$result};\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-bg-color($tokens, $options:()) {\n  @if not map-has-key($options, hover) {\n    $options: map-merge($options, (hover: true));\n  }\n  @include _scheme-element(background-color, background, $tokens, $options);\n}\n\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n///   - hover {boolean}: si true, surcharge la valeur de blend pour être héritée\n@mixin scheme-element-bg-transparent($options) {\n  $legacy: map-get($options, legacy);\n  $important: map-get($options, important);\n  $hover: map-get($options, hover);\n\n  $value: important(transparent, $important);\n\n  @if $important {\n    $value: #{$value} !important;\n  }\n\n  @if $legacy {\n    @include legacy(ie11) {\n      background-color: transparent;\n    }\n  }\n  @else {\n    background-color: transparent;\n    @if $hover {\n      --blend: inherit;\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-bg-image-color($tokens, $options, $value: linear-gradient(0deg, $COLOR, $COLOR)) {\n  $d: get-tokens-length($tokens);\n  @if $d > 1 and $value == linear-gradient(0deg, $COLOR, $COLOR) {\n    $transformed: ();\n    @for $i from 1 through $d {\n      $c: unquote('$color##{$i}');\n      $transformed: append($transformed, linear-gradient(0deg, $c, $c), comma);\n    }\n    $value: $transformed;\n  }\n  @include _scheme-element(background-image, background, $tokens, $options, $value);\n}\n\n/// Ajout d'une couleur de texte sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-text-color($tokens, $options) {\n  @include _scheme-element(color, text, $tokens, $options);\n}\n\n/// Ajout d'une couleur de fill sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-fill-color($tokens, $options) {\n  @include _scheme-element(fill, background , $tokens, $options);\n}\n\n/// Ajout d'une couleur de border sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n///   - side {String}: le côté affecté. valeurs: top, right, bottom, left\n/// @param {List} $value - définition des propriétés de border\n@mixin scheme-element-border-color($tokens, $options, $value:1px solid $COLOR) {\n  $prop:border;\n  @if map-has-key($options, side) {\n    $prop:border-#{map-get($options, side)};\n  }\n  @include _scheme-element($prop, border, $tokens, $options, $value);\n}\n\n@mixin scheme-element-no-border($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    border: 0;\n  }\n}\n\n/// Ajout d'une couleur d'outline sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés d'outline\n@mixin scheme-element-outline-color($tokens, $options, $value:1px solid $COLOR) {\n  @include _scheme-element(outline, border, $tokens, $options, $value);\n}\n\n/// Ajout d'une couleur de box-shadow sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés de box-shadow\n@mixin scheme-element-box-shadow-color($tokens, $options, $value: all-1-in) {\n  $has-keys: true;\n  $transformed: ();\n  $d: get-tokens-length($tokens);\n  $i: 1;\n  @each $v in $value {\n    @if map-has-key($box-shadows, $v) {\n      $transformed: append($transformed, _get-box-shadow($v, $i), comma);\n      @if $i < $d {\n        $i: $i + 1;\n      }\n    }\n    @else {\n      $has-keys: false;\n    }\n  }\n  @if $has-keys {\n    $value: $transformed;\n  }\n  @include _scheme-element(box-shadow, border, $tokens, $options, space($value));\n}\n\n/// Supprime la shadow-box sur l'élément\n/// @access public\n/// @param {string} $breakpoint - la shadow-box est retiré à partir d'un breakpoint si celui-ci est défini\n@mixin scheme-element-no-box-shadow($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    box-shadow: none;\n  }\n}\n","@charset \"UTF-8\";\n/**\n * L'input de type checkbox avec son label est contenu dans un groupe\n * Ce groupe contient également les textes de validation, d'erreur et d'aide (optionnels)\n */\n.fr-checkbox-group {\n  /**\n    * On cache l'input de type checkbox pour le styler via le label\n    */\n  /**\n    * Modificateur pour gérer l'état erreur\n    */\n  /**\n    * Modificateur pour gérer l'état validé\n    */\n}\n\n.fr-checkbox-group input[type=\"checkbox\"] {\n  /**\n      * On applique les styles au pseudo élément before du label quand l'input présente\n      * un état check ou active\n      */\n  /**\n      * Mixins pour appliquer les styles correspondant au focus ainsi qu'à l'état disabled\n      */\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-checkbox-group input[type=\"checkbox\"] + label::before {\n    box-shadow: inset 0 0 0 1px #161616;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-checkbox-group input[type=\"checkbox\"]:checked + label::before, .fr-checkbox-group input[type=\"checkbox\"]:active:not(:disabled) + label::before {\n    background-color: #000091;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-checkbox-group input[type=\"checkbox\"]:checked + label::before, .fr-checkbox-group input[type=\"checkbox\"]:active:not(:disabled) + label::before {\n    color: #fff;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-checkbox-group input[type=\"checkbox\"]:disabled + label::before, .fr-checkbox-group input[type=\"checkbox\"][disabled] + label::before {\n    box-shadow: inset 0 0 0 1px #e5e5e5;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-checkbox-group input[type=\"checkbox\"]:disabled:checked + label::before, .fr-checkbox-group input[type=\"checkbox\"][disabled]:checked + label::before {\n    color: #929292;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-checkbox-group input[type=\"checkbox\"]:disabled:checked + label::before, .fr-checkbox-group input[type=\"checkbox\"][disabled]:checked + label::before {\n    background-color: #e5e5e5;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-checkbox-group--error input[type=\"checkbox\"] + label {\n    color: #ce0500;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-checkbox-group--error::before {\n    box-shadow: inset 2px 0 0 0 #ce0500;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-checkbox-group--valid input[type=\"checkbox\"] + label {\n    color: #18753c;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-checkbox-group--valid::before {\n    box-shadow: inset 2px 0 0 0 #18753c;\n  }\n}\n","////\n/// Checkbox Scheme\n/// @group checkboxe\n////\n\n/**\n * L'input de type checkbox avec son label est contenu dans un groupe\n * Ce groupe contient également les textes de validation, d'erreur et d'aide (optionnels)\n */\n@mixin _checkbox-scheme($legacy: false) {\n  #{ns(checkbox-group)} {\n    /**\n    * On cache l'input de type checkbox pour le styler via le label\n    */\n    input[type=\"checkbox\"] {\n      + label {\n        @include before {\n          @include scheme-element-box-shadow-color(action-high grey, (legacy:$legacy));\n        }\n      }\n\n      /**\n      * On applique les styles au pseudo élément before du label quand l'input présente\n      * un état check ou active\n      */\n      &:checked,\n      &:active:not(:disabled) {\n        + label {\n          @include before {\n            @include scheme-element-bg-color(active blue-france, (legacy:$legacy));\n            @include scheme-element-text-color(inverted grey, (legacy:$legacy));\n          }\n        }\n      }\n\n      /**\n      * Mixins pour appliquer les styles correspondant au focus ainsi qu'à l'état disabled\n      */\n      @include disabled {\n        & + label {\n          @include before {\n            @include disabled-colors((legacy: $legacy, box-shadow: true));\n          }\n        }\n\n        &:checked {\n          & + label {\n            @include before {\n              @include disabled-colors((legacy: $legacy, text: true, background: true));\n            }\n          }\n        }\n      }\n    }\n\n    /**\n    * Modificateur pour gérer l'état erreur\n    */\n    &--error {\n      input[type=\"checkbox\"] + label {\n        @include scheme-element-text-color(default error, (legacy:$legacy));\n      }\n\n      @include before {\n        @include scheme-element-box-shadow-color(plain error, (legacy:$legacy), left-2-in);\n      }\n    }\n\n    /**\n    * Modificateur pour gérer l'état validé\n    */\n    &--valid {\n      input[type=\"checkbox\"] + label {\n        @include scheme-element-text-color(default success, (legacy:$legacy));\n      }\n\n      @include before {\n        @include scheme-element-box-shadow-color(plain success, (legacy:$legacy), left-2-in);\n      }\n    }\n  }\n}\n"]}