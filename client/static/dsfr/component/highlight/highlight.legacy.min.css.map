{"version":3,"sources":["<no source>","../../../../../../src/legacy/style/tool/_legacy.scss","../../../../../../src/component/highlight/style/_scheme.scss","../../../../../../src/core/style/color/tool/_element.scss","../../../highlight.legacy.css","../../../../../../src/core/style/color/tool/_accent.scss"],"names":[],"mappings":"AAAA;;GAAA,ACcI,2DCRF,cC2BI,qCC9BJ,CCWI,sCFmBA,qCCxBJ,CCKI,8BFmBA,qCClBJ,CCDI,8BFmBA,qCCZJ,CCPI,4BFmBA,qCCNJ,CCbI,8BFmBA,qCCAJ,CCnBI,0BFmBA,qCCMJ,CCzBI,4BFmBA,qCCYJ,CC/BI,8BFmBA,qCCkBJ,CCrCI,4BFmBA,qCCwBJ,CC3CI,0BFmBA,qCC8BJ,CCjDI,gCFmBA,qCCoCJ,CCvDI,+BFmBA,qCC0CJ,CC7DI,mCFmBA,qCCgDJ,CCnEI,gCFmBA,qCCsDJ,CCzEI,6BFmBA,qCC4DJ,CC/EI,2BFmBA,qCCkEJ,CCrFI,gCFmBA,qCCwEJ,CArGF","file":"highlight.legacy.min.css","sourcesContent":[null,"////\n/// Legacy Tool : legacy\n/// @group legacy\n////\n\n/// Styles spécifiques pour les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n      @content;\n    }\n  }\n}\n\n/// Styles spécifiques pour les plateformes modernes, excluant les plateformes antérieures\n///\n/// @example scss -\n///   .foo {\n///     @include ie-hack() {\n///     }\n///   }\n@mixin not-legacy($target) {\n  @if $target == ie10 or $target == ie11 {\n    @supports not (-ms-high-contrast: none) {\n      @content;\n    }\n  }\n}\n","////\n/// Highlight Scheme\n/// @group Highlight\n////\n\n@mixin _highlight-scheme($legacy: false) {\n  #{ns(highlight)} {\n    @include scheme-element-box-shadow-color(default blue-france, (legacy:$legacy), left-1v-in);\n\n    @include accent-modifiers {\n      @include scheme-element-box-shadow-color(default accent, (legacy:$legacy), left-1v-in);\n    }\n  }\n}\n","////\n/// Core Color Tools : Element\n/// @group core\n////\n\n$ACCENT: none;\n\n@mixin _scheme-element($prop, $context, $tokens, $options: (), $value: $COLOR) {\n  $legacy: map-get($options, legacy);\n  $important: map-get($options, important);\n  $hover: map-get($options, hover);\n  $standalone: map-get($options, standalone);\n\n  $tokens: normalise-tokens($tokens, $context);\n  $type: decision;\n  $options: (var: true);\n  @if $legacy or $standalone {\n    $type: hex;\n    $option: (theme: light);\n  }\n  $colors: get-colors($tokens, $type, $options);\n  $result: get-result($colors, $value);\n  $result: important($result, $important);\n\n  @if $hover and $context == background and $legacy == false and length($tokens) == 1 {\n    $blend: get-color(nth($tokens, 1), decision, (var: true, blend: true));\n    $blend: important($blend, $important);\n\n    --blend: #{$blend};\n  }\n\n  @if $legacy {\n    @include legacy(ie11) {\n      #{$prop}: #{$result};\n    }\n  }\n  @else {\n    #{$prop}: #{$result};\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-bg-color($tokens, $options:()) {\n  @if not map-has-key($options, hover) {\n    $options: map-merge($options, (hover: true));\n  }\n  @include _scheme-element(background-color, background, $tokens, $options);\n}\n\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n///   - hover {boolean}: si true, surcharge la valeur de blend pour être héritée\n@mixin scheme-element-bg-transparent($options) {\n  $legacy: map-get($options, legacy);\n  $important: map-get($options, important);\n  $hover: map-get($options, hover);\n\n  $value: important(transparent, $important);\n\n  @if $important {\n    $value: #{$value} !important;\n  }\n\n  @if $legacy {\n    @include legacy(ie11) {\n      background-color: transparent;\n    }\n  }\n  @else {\n    background-color: transparent;\n    @if $hover {\n      --blend: inherit;\n    }\n  }\n}\n\n/// Ajout d'une couleur de background sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-bg-image-color($tokens, $options, $value: linear-gradient(0deg, $COLOR, $COLOR)) {\n  $d: get-tokens-length($tokens);\n  @if $d > 1 and $value == linear-gradient(0deg, $COLOR, $COLOR) {\n    $transformed: ();\n    @for $i from 1 through $d {\n      $c: unquote('$color##{$i}');\n      $transformed: append($transformed, linear-gradient(0deg, $c, $c), comma);\n    }\n    $value: $transformed;\n  }\n  @include _scheme-element(background-image, background, $tokens, $options, $value);\n}\n\n/// Ajout d'une couleur de texte sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-text-color($tokens, $options) {\n  @include _scheme-element(color, text, $tokens, $options);\n}\n\n/// Ajout d'une couleur de fill sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n@mixin scheme-element-fill-color($tokens, $options) {\n  @include _scheme-element(fill, background , $tokens, $options);\n}\n\n/// Ajout d'une couleur de border sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n///   - side {String}: le côté affecté. valeurs: top, right, bottom, left\n/// @param {List} $value - définition des propriétés de border\n@mixin scheme-element-border-color($tokens, $options, $value:1px solid $COLOR) {\n  $prop:border;\n  @if map-has-key($options, side) {\n    $prop:border-#{map-get($options, side)};\n  }\n  @include _scheme-element($prop, border, $tokens, $options, $value);\n}\n\n@mixin scheme-element-no-border($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    border: 0;\n  }\n}\n\n/// Ajout d'une couleur d'outline sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés d'outline\n@mixin scheme-element-outline-color($tokens, $options, $value:1px solid $COLOR) {\n  @include _scheme-element(outline, border, $tokens, $options, $value);\n}\n\n/// Ajout d'une couleur de box-shadow sur un élément\n/// @access public\n/// @param {list} $tokens - liste des tokens de décision\n/// @param {map} $options - map des options :\n///   - legacy {boolean}: version pour navigateurs modernes ou anciens.\n///   - important {boolean}: si true, applique !important à la règle css\n/// @param {List} $value - définition des propriétés de box-shadow\n@mixin scheme-element-box-shadow-color($tokens, $options, $value: all-1-in) {\n  $has-keys: true;\n  $transformed: ();\n  $d: get-tokens-length($tokens);\n  $i: 1;\n  @each $v in $value {\n    @if map-has-key($box-shadows, $v) {\n      $transformed: append($transformed, _get-box-shadow($v, $i), comma);\n      @if $i < $d {\n        $i: $i + 1;\n      }\n    }\n    @else {\n      $has-keys: false;\n    }\n  }\n  @if $has-keys {\n    $value: $transformed;\n  }\n  @include _scheme-element(box-shadow, border, $tokens, $options, space($value));\n}\n\n/// Supprime la shadow-box sur l'élément\n/// @access public\n/// @param {string} $breakpoint - la shadow-box est retiré à partir d'un breakpoint si celui-ci est défini\n@mixin scheme-element-no-box-shadow($breakpoint: null) {\n  @include respond-from($breakpoint) {\n    box-shadow: none;\n  }\n}\n","@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-highlight {\n    box-shadow: inset 0.25rem 0 0 0 #6a6af4;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-highlight--green-tilleul-verveine {\n    box-shadow: inset 0.25rem 0 0 0 #b7a73f;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-highlight--green-bourgeon {\n    box-shadow: inset 0.25rem 0 0 0 #68a532;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-highlight--green-emeraude {\n    box-shadow: inset 0.25rem 0 0 0 #00a95f;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-highlight--green-menthe {\n    box-shadow: inset 0.25rem 0 0 0 #009081;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-highlight--green-archipel {\n    box-shadow: inset 0.25rem 0 0 0 #009099;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-highlight--blue-ecume {\n    box-shadow: inset 0.25rem 0 0 0 #465f9d;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-highlight--blue-cumulus {\n    box-shadow: inset 0.25rem 0 0 0 #417dc4;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-highlight--purple-glycine {\n    box-shadow: inset 0.25rem 0 0 0 #a558a0;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-highlight--pink-macaron {\n    box-shadow: inset 0.25rem 0 0 0 #e18b76;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-highlight--pink-tuile {\n    box-shadow: inset 0.25rem 0 0 0 #ce614a;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-highlight--yellow-tournesol {\n    box-shadow: inset 0.25rem 0 0 0 #c8aa39;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-highlight--yellow-moutarde {\n    box-shadow: inset 0.25rem 0 0 0 #c3992a;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-highlight--orange-terre-battue {\n    box-shadow: inset 0.25rem 0 0 0 #e4794a;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-highlight--brown-cafe-creme {\n    box-shadow: inset 0.25rem 0 0 0 #d1b781;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-highlight--brown-caramel {\n    box-shadow: inset 0.25rem 0 0 0 #c08c65;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-highlight--brown-opera {\n    box-shadow: inset 0.25rem 0 0 0 #bd987a;\n  }\n}\n\n@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {\n  .fr-highlight--beige-gris-galet {\n    box-shadow: inset 0.25rem 0 0 0 #aea397;\n  }\n}\n","////\n/// Core Tools : Color accent\n/// @group schemes\n////\n\n@mixin accent-modifiers () {\n  $tints: ();\n  $accent: map-get($scheme-sets, accent);\n  @each $tint, $value in $accent {\n    $tints: append($tints, $tint);\n  }\n\n  @at-root {\n    @each $tint in $tints {\n      &--#{$tint} {\n        $ACCENT: #{$tint} !global;\n        @content;\n      }\n    }\n    $ACCENT: none !global;\n  }\n}\n"]}